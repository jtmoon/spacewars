// Generated by CoffeeScript 1.4.0

/*if not uuid
  uuid = require 'node-uuid'
*/


(function() {
  var Ship, root, types,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  types = {
    type1: {
      health: {
        max: 200
      },
      shield: {
        max: 200
      },
      attack: {
        power: 20,
        speed: 5,
        size: 3,
        velocity: 20,
        halflife: 20
      },
      turnSpeed: 7,
      size: 20,
      acceleration: 10,
      maxVel: 40
    }
  };

  Ship = (function() {

    function Ship(obj, ctx) {
      var key;
      this.ctx = ctx;
      if (!obj) {
        throw new Error('Need input.');
      } else {
        if (!obj.hasOwnProperty('name')) {
          throw new Error('Need a name.');
        } else {
          /* Set the name of the ship
          */

          this.name = obj.name;
        }
        /* Create ship instance
        */

        this.id = uuid.v4();
        if (!obj.hasOwnProperty('type')) {
          this.type = 'type1';
        } else {
          this.type = 'type1';
        }
        this.accept = {
          turns: ['left', 'right']
        };
        this.thrust = 0;
        this.velocity = {
          x: 0,
          y: 0
        };
        this.position = {
          tip: {
            x: 30,
            y: 30
          },
          left: {
            x: 24,
            y: 50
          },
          right: {
            x: 36,
            y: 50
          }
        };
        this.isTurning = false;
        this.isAccelerating = false;
        this.position.center = this.calcCenter();
        this.angle = 0;
        for (key in types[this.type]) {
          this[key] = types[this.type][key];
        }
      }
      return;
    }

    Ship.prototype.calcCenter = function() {
      /*
          Arguments:      None
          Return:         Object { x, y }
          Description:    Calculates the center position of the ship
                          and returns an object with x, y coordinates.
      */

      var center;
      center = {
        x: (this.position.left.x + this.position.right.x) / 2,
        y: (this.position.tip.y + this.position.left.y) / 2
      };
      return center;
    };

    Ship.prototype.tick = function() {
      /*
          Arguments:      None
          Return:         None
          Description:    Updates the ship with each tick.
      */

      /* Smoother turning using bool checks
      */

      var turn, _ref;
      if (this.isTurning) {
        if (_ref = this.isTurning, __indexOf.call(this.accept.turns, _ref) >= 0) {
          turn = (Math.PI / 180) * 1.8;
          if (this.isTurning === 'left') {
            this.angle = this.angle - turn;
          }
          if (this.isTurning === 'right') {
            this.angle = this.angle + turn;
          }
        } else {
          throw new Error('Incorrect input.');
        }
      }
      this.ctx.save();
      this.ctx.translate(this.position.center.x, this.position.center.y);
      this.ctx.rotate(this.angle);
      this.ctx.translate(-this.position.center.x, -this.position.center.y);
      this.makeShape();
      this.ctx.restore();
    };

    Ship.prototype.accelerate = function() {
      /*
          Arguments:      None
          Return:         None
          Description:    Accelerate based on angle.
      */

    };

    Ship.prototype.makeShape = function() {
      this.ctx.beginPath();
      this.ctx.moveTo(this.position.tip.x, this.position.tip.y);
      this.ctx.lineTo(this.position.left.x, this.position.left.y);
      this.ctx.lineTo(this.position.right.x, this.position.right.y);
      this.ctx.closePath();
      this.ctx.strokeStyle = '#fff';
      this.ctx.stroke();
    };

    return Ship;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Ship = Ship;

}).call(this);
